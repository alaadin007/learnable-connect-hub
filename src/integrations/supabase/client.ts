
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://ldlgckwkdsvrfuymidrr.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImxkbGdja3drZHN2cmZ1eW1pZHJyIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDYwNTc2NzksImV4cCI6MjA2MTYzMzY3OX0.kItrTMcKThMXuwNDClYNTGkEq-1EVVldq1vFw7ZsKx0";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(
  SUPABASE_URL, 
  SUPABASE_PUBLISHABLE_KEY,
  {
    auth: {
      autoRefreshToken: true,
      persistSession: true,
      detectSessionInUrl: true,
      flowType: 'pkce', // Use PKCE flow for more security but better compatibility
      debug: process.env.NODE_ENV === 'development', // Enable debug mode in development
    }
  }
);

// Helper function to detect test accounts
export const isTestAccount = (email: string): boolean => {
  // Used to identify development test accounts which get special handling
  if (!email) return false;
  return email.endsWith('@testschool.edu') || email.endsWith('.test@learnable.edu');
};

// Default test school code - used when creating test accounts
export const TEST_SCHOOL_CODE = 'TESTCODE';

// Helper for type safety with RPC functions
export type TeacherInvitationResult = {
  invitation_id: string;
  school_id: string;
  school_name: string;
  email: string;
}

// Helper function to validate if a string is a valid UUID
export const isValidUUID = (id: string): boolean => {
  const uuidPattern = /^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i;
  return uuidPattern.test(id);
};

// Helper function that returns a mock UUID for test purposes to avoid database errors
export const getMockOrValidUUID = (id?: string): string | undefined => {
  if (!id) return undefined;
  
  // If it's a valid UUID, return it
  if (isValidUUID(id)) return id;
  
  // If it's "test" or another non-UUID value, return a consistent mock UUID
  // This prevents database errors when the app is in test/demo mode
  return '00000000-0000-0000-0000-000000000000';
};

// Export the URL and key for direct access without using the protected properties
export const SUPABASE_PUBLIC_URL = SUPABASE_URL;
export const SUPABASE_PUBLIC_KEY = SUPABASE_PUBLISHABLE_KEY;
