// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';
import { sessionLogger } from '@/utils/sessionLogger';

const SUPABASE_URL = "https://ldlgckwkdsvrfuymidrr.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImxkbGdja3drZHN2cmZ1eW1pZHJyIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDYwNTc2NzksImV4cCI6MjA2MTYzMzY3OX0.kItrTMcKThMXuwNDClYNTGkEq-1EVVldq1vFw7ZsKx0";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

// Get the current site URL from deployment or development
const getSiteUrl = () => {
  if (typeof window !== 'undefined') {
    return window.location.origin;
  }
  return 'https://learnable-connect-hub.lovable.app'; // Update with the actual deployed URL
};

export const supabase = createClient<Database>(
  SUPABASE_URL, 
  SUPABASE_PUBLISHABLE_KEY,
  {
    auth: {
      autoRefreshToken: true,
      persistSession: true,
      detectSessionInUrl: true,
      flowType: 'pkce', // Use PKCE flow for more security but better compatibility
      debug: process.env.NODE_ENV === 'development', // Enable debug mode in development
      
      // Set up storage for authentication
      storage: {
        getItem: (key) => {
          try {
            return Promise.resolve(localStorage.getItem(key));
          } catch (error) {
            console.error('Error getting auth item from storage:', error);
            return Promise.resolve(null);
          }
        },
        setItem: (key, value) => {
          try {
            localStorage.setItem(key, value);
            return Promise.resolve();
          } catch (error) {
            console.error('Error setting auth item in storage:', error);
            return Promise.resolve();
          }
        },
        removeItem: (key) => {
          try {
            localStorage.removeItem(key);
            return Promise.resolve();
          } catch (error) {
            console.error('Error removing auth item from storage:', error);
            return Promise.resolve();
          }
        }
      }
    },
    global: {
      headers: {
        'X-Client-Info': 'supabase-js-v2'
      }
    },
    realtime: {
      params: {
        eventsPerSecond: 10
      }
    }
  }
);

// Set up auth session initialization
if (typeof window !== 'undefined') {
  // Initialize session
  supabase.auth.getSession().then(({ data: { session }, error: sessionError }) => {
    if (sessionError) {
      console.error('Error getting initial session:', sessionError);
    }

    // Set up auth state change listener to handle token refreshes
    const { data } = supabase.auth.onAuthStateChange(
      (event, newSession) => {
        console.log('Auth state changed:', event, newSession?.user?.email);
        
        if (event === 'TOKEN_REFRESHED') {
          console.log('Token refreshed automatically');
          sessionLogger.logEvent('token_refreshed');
        } else if (event === 'SIGNED_OUT') {
          console.log('User signed out');
          sessionLogger.logEvent('signed_out');
        } else if (event === 'SIGNED_IN') {
          // Check if email is verified
          if (newSession?.user && !newSession.user.email_confirmed_at) {
            console.log('User signed in but email not verified');
            sessionLogger.logEvent('signed_in_unverified');
            // Sign out the user if email is not verified
            supabase.auth.signOut().catch(error => {
              console.error('Error signing out unverified user:', error);
            });
          } else {
            console.log('User signed in successfully');
            sessionLogger.logEvent('signed_in');
          }
        } else if (event === 'USER_UPDATED') {
          console.log('User updated:', newSession?.user);
          sessionLogger.logEvent('user_updated');
        } else if (event === 'PASSWORD_RECOVERY') {
          console.log('Password recovery initiated');
          sessionLogger.logEvent('password_recovery');
        }
      }
    );

    const subscription = data.subscription;
    
    // Return cleanup function for React components that use this
    return () => {
      try {
        subscription.unsubscribe();
      } catch (error) {
        console.error('Error unsubscribing from auth state changes:', error);
      }
    };
  }).catch(error => {
    console.error('Error in session initialization:', error);
  });
}

// Helper function to detect test accounts
export const isTestAccount = (email: string): boolean => {
  // Used to identify development test accounts which get special handling
  if (!email) return false;
  return email.endsWith('@testschool.edu') || email.endsWith('.test@learnable.edu');
};

// Default test school code - used when creating test accounts
export const TEST_SCHOOL_CODE = 'TESTCODE';

// Helper for type safety with RPC functions
export type TeacherInvitationResult = {
  invitation_id: string;
  school_id: string;
  school_name: string;
  email: string;
}

// Helper function to validate if a string is a valid UUID
export const isValidUUID = (id: string): boolean => {
  const uuidPattern = /^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i;
  return uuidPattern.test(id);
};

// Helper function that returns a mock or valid UUID for test purposes to avoid database errors
export const getMockOrValidUUID = (id?: string): string | undefined => {
  if (!id) return undefined;
  
  // If it's a valid UUID, return it
  if (isValidUUID(id)) return id;
  
  // If it's "test" or another non-UUID value, return a consistent mock UUID
  // This prevents database errors when the app is in test/demo mode
  return '00000000-0000-0000-0000-000000000000';
};

// Export functions for safe parameter handling in supabase queries
export const asSupabaseParam = <T>(value: T): any => value;

// Export the URL and key for direct access without using the protected properties
export const SUPABASE_PUBLIC_URL = SUPABASE_URL;
export const SUPABASE_PUBLIC_KEY = SUPABASE_PUBLISHABLE_KEY;

// Improved error handling for auth storage
const getAuthItem = async (key: string): Promise<string | null> => {
  try {
    if (typeof window === 'undefined') {
      return null;
    }
    const item = localStorage.getItem(key);
    return item ? JSON.parse(item) : null;
  } catch (error) {
    console.error('Error getting auth item from storage:', error);
    return null;
  }
};

const setAuthItem = async (key: string, value: any): Promise<void> => {
  try {
    if (typeof window === 'undefined') {
      return;
    }
    localStorage.setItem(key, JSON.stringify(value));
  } catch (error) {
    console.error('Error setting auth item in storage:', error);
    throw new Error('Failed to store authentication data');
  }
};

const removeAuthItem = async (key: string): Promise<void> => {
  try {
    if (typeof window === 'undefined') {
      return;
    }
    localStorage.removeItem(key);
  } catch (error) {
    console.error('Error removing auth item from storage:', error);
    throw new Error('Failed to remove authentication data');
  }
};

// Improved session refresh handling
const refreshSession = async () => {
  try {
    const { data, error } = await supabase.auth.refreshSession();
    if (error) {
      console.error('Error refreshing token:', error);
      throw new Error('Failed to refresh session');
    }
    return data;
  } catch (err) {
    console.error('Exception during token refresh:', err);
    throw new Error('Session refresh failed');
  }
};

// Improved session validity check
const checkSessionValidity = async () => {
  try {
    const { data: { session }, error } = await supabase.auth.getSession();
    if (error) {
      console.error('Error checking session validity:', error);
      return false;
    }
    return !!session;
  } catch (err) {
    console.error('Error checking session validity:', err);
    return false;
  }
};
